============================================== PROMPT 1 ====================================================

Create a full-stack room booking web application with the following stack: Use reusable and maintainable component code where possible
Frontend: React + Tailwind CSS
Backend: Node.js (Express)
Database: MySQL (localhost:3306, user: root, password: P@55w0rd, name of database: bsc-booking)

Features:
1. Authentication
Login modal for all users (username, password).
Role-based access (user, admin).
Use JWT or session-based authentication.

2. Pages

Login Page: Secure modal login for all users.

Home Page (All Users):

Room booking form with:
Room dropdown
Default start date = today
Optional end date (for multiple-day bookings)
Time selection (30-minute steps from 6:00 AM–12:00 AM)
Only available slots are selectable
Frequency: single (default), daily, weekly, monthly
Event name input
Status defaults to "pending"
Calendar View:
One tab per room showing monthly calendar
Only approved bookings shown
Show event name, times, user
Modal popup on click with full details and status

My Bookings Page (All Users):
Filter by room and date
Paginated table with columns: created date, room, times, event, status, approved on
Users can edit/delete only their pending bookings

Admin Page (Admins only):
Filter bookings by user, room, date, status
Paginated, sortable table of all bookings
Actions: approve/reject/edit/delete bookings
Recurring booking management: edit/delete individual or all in series
Book on behalf of any user
Admins can create users and assign roles
Log all admin actions with timestamps
Database Schema:
User: id, username, name, password, role
Booking: id, user, room, event, start_datetime, end_datetime, frequency (single, daily, weekly, monthly), series_id, status
Room: id, room, floor (2–5), pax
Series: id, repeat_type, repeat_interval, repeat_on (["Monday", "Wednesday"] or ["15"] or ["Second Tuesday"] or ["February", "April"]), ends_after (Repeat N times), ends_on (Or until specific date (max 2 years from now))

Testing:
Add seed data for:
User: user / user / user / user
Admin: admin / admin / admin / admin
Rooms: Damien Hall / 1 / 100, Attic / 5 / 30

Requirements:
All tables must be paginated
Input validation with helpful error messages
Secure login and role-based routing
Use environment variables for credentials in production
Scaffold the project with this structure and implement basic functionality for each feature/page.

============================================== PROMPT 2 ====================================================

The repeating booking series feature in the room reservation system.

Requirements:

Frequency Options:
- Default: "single"

Allow all users to choose frequency options:
- Every x days
- Every x weeks
- - Selection of specific weekdays
- Every x months:
  - Repeat on yth of month (e.g., 15th)
  - Repeat on zth day (e.g., 2nd Tuesday)
  - Selection of dates (dd) to repeat
- Every x year
  - Repeat on yth date (eg. 15th May)
  - Repeat on zth day (e.g. 1st Friday of May)
  - Selection of months to repeat on nth day

- Set Duration:
  - End after a specific number of times
  - End on a particular date (max 2 years from current date)

User Controls in "My Bookings":
- Edit/delete own bookings:
  - Only this event
  - This and future events
  - All events in series

Admin Controls:
- Can approve/reject/add/edit/delete repeating bookings on behalf of other users:
  - Only this event
  - This and future events
  - All events in series

Calendar View:
-  Every approved event in the same series must appear on the calendar.